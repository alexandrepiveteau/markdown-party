package io.github.alexandrepiveteau.echo

import io.github.alexandrepiveteau.echo.causal.SiteIdentifier
import io.github.alexandrepiveteau.echo.events.EventScope
import io.github.alexandrepiveteau.echo.internal.history.ActualPersistentHistory
import io.github.alexandrepiveteau.echo.internal.history.PersistentHistorySite
import io.github.alexandrepiveteau.echo.logs.Change.Companion.skipped
import io.github.alexandrepiveteau.echo.logs.EventLog.IndexedEvent
import io.github.alexandrepiveteau.echo.logs.ImmutableEventLog
import io.github.alexandrepiveteau.echo.logs.PersistentEventLog
import io.github.alexandrepiveteau.echo.logs.persistentEventLogOf
import io.github.alexandrepiveteau.echo.projections.OneWayProjection
import io.github.alexandrepiveteau.echo.projections.TwoWayProjection
import io.github.alexandrepiveteau.echo.protocol.Message.Incoming as Inc
import io.github.alexandrepiveteau.echo.protocol.Message.Outgoing as Out
import kotlinx.coroutines.flow.StateFlow

/**
 * An interface describing a [Site] in the distributed system. Each [Site] is associated with a
 * globally unique [SiteIdentifier].
 *
 * @param T the type of the events managed by this [Site].
 * @param M the type of the underlying aggregated model for this [Site].
 */
interface Site<T, out M> : Exchange<Inc<T>, Out<T>> {
  val identifier: SiteIdentifier
  val value: StateFlow<M>
}

/**
 * A mutable version of [Site], which allows the insertion of the events [T] through its [event]
 * method.
 *
 * @param T the type of the events managed by this [Site].
 * @param M the type of the underlying aggregated model for this [Site].
 */
interface MutableSite<T, out M> : Site<T, M> {

  /**
   * Creates some new events, that are generated in the [EventScope]. This function returns once the
   * events have been successfully added to the underlying [MutableSite].
   */
  suspend fun event(scope: suspend EventScope<T>.(M) -> Unit)
}

/**
 * Creates a new [Site] for the provided [SiteIdentifier], which can not be manually mutated.
 *
 * @param identifier the globally unique identifier for this [Site].
 * @param log the underlying [PersistentEventLog] for this [site].
 * @param T the type of the events managed by this [Site].
 */
fun <T> site(
    identifier: SiteIdentifier,
    log: PersistentEventLog<T, Nothing> = persistentEventLogOf(),
): Site<T, ImmutableEventLog<T, Nothing>> = mutableSite(identifier, log)

/**
 * Creates a new [MutableSite] for the provided [SiteIdentifier], with a backing [log].
 *
 * @param identifier the globally unique identifier for this [Site].
 * @param log the underlying [io.github.alexandrepiveteau.echo.logs.PersistentEventLog] for this
 * [MutableSite].
 *
 * @param T the type of the events managed by this [Site].
 */
fun <T> mutableSite(
    identifier: SiteIdentifier,
    log: PersistentEventLog<T, Nothing> = persistentEventLogOf(),
): MutableSite<T, PersistentEventLog<T, Nothing>> =
    unorderedSite(
        identifier = identifier,
        log = log.toPersistentEventLog(),
        initial = persistentEventLogOf(),
    ) { entry, model ->
      model.apply {
        set(entry.identifier.site, entry.identifier.seqno, entry.body, change = skipped())
      }
    }

/**
 * Creates a new [MutableSite] for the provided [SiteIdentifier], with a backing [log].
 * Additionally, this overload takes a [OneWayProjection] and lets you specify a projection to apply
 * to the data, to have custom [MutableSite.event] arguments.
 *
 * @param identifier the globally unique identifier for this [Site].
 * @param log the underlying [PersistentEventLog] for this [MutableSite].
 * @param initial the initial value for the projection aggregate.
 * @param projection the [OneWayProjection] for this [Site].
 *
 * @param M the type of the model for this [Site].
 * @param T the type of the events managed by this [Site].
 */
fun <M, T> mutableSite(
    identifier: SiteIdentifier,
    initial: M,
    log: PersistentEventLog<T, M> = persistentEventLogOf(),
    projection: OneWayProjection<M, IndexedEvent<T>>,
): MutableSite<T, M> = unorderedSite(identifier, initial, log, projection)

/**
 * Creates a new [MutableSite] for the provided [SiteIdentifier], with a backing [log].
 * Additionally, this overload takes a [TwoWayProjection] and lets you specify a projection to apply
 * to the data, to have custom [MutableSite.event] arguments.
 *
 * @param identifier the globally unique identifier for this [Site].
 * @param log the underlying [PersistentEventLog] for this [MutableSite].
 * @param initial the initial value for the projection aggregate.
 * @param projection the [TwoWayProjection] for this [Site].
 *
 * @param M the type of the model for this [Site].
 * @param T the type of the events managed by this [Site].
 * @param C the type of the changes generated by this [Site].
 */
fun <M, T, C> mutableSite(
    identifier: SiteIdentifier,
    initial: M,
    log: PersistentEventLog<T, C> = persistentEventLogOf(),
    projection: TwoWayProjection<M, IndexedEvent<T>, C>,
): MutableSite<T, M> = unorderedSite(identifier, initial, log, projection)

// INTERNAL BUILDERS

internal fun <M, T> unorderedSite(
    identifier: SiteIdentifier,
    initial: M,
    log: PersistentEventLog<T, M> = persistentEventLogOf(),
    projection: OneWayProjection<M, IndexedEvent<T>>,
): MutableSite<T, M> =
    PersistentHistorySite(
        identifier,
        ActualPersistentHistory(initial, log, projection),
    )

internal fun <M, T, C> unorderedSite(
    identifier: SiteIdentifier,
    initial: M,
    log: PersistentEventLog<T, C> = persistentEventLogOf(),
    projection: TwoWayProjection<M, IndexedEvent<T>, C>,
): MutableSite<T, M> =
    PersistentHistorySite(
        identifier,
        ActualPersistentHistory(initial, log, projection),
    )
