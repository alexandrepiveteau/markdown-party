package io.github.alexandrepiveteau.echo

import io.github.alexandrepiveteau.echo.core.causality.EventIdentifier
import io.github.alexandrepiveteau.echo.core.causality.SiteIdentifier
import io.github.alexandrepiveteau.echo.core.log.MutableProjection
import io.github.alexandrepiveteau.echo.core.log.mutableHistoryOf
import io.github.alexandrepiveteau.echo.events.EventScope
import io.github.alexandrepiveteau.echo.projections.OneWayMutableProjection
import io.github.alexandrepiveteau.echo.projections.OneWayProjection
import io.github.alexandrepiveteau.echo.projections.TwoWayMutableProjection
import io.github.alexandrepiveteau.echo.projections.TwoWayProjection
import io.github.alexandrepiveteau.echo.protocol.Message.Incoming as Inc
import io.github.alexandrepiveteau.echo.protocol.Message.Outgoing as Out
import io.github.alexandrepiveteau.echo.protocol.MutableSiteImpl
import io.github.alexandrepiveteau.echo.protocol.SiteImpl
import kotlinx.coroutines.flow.StateFlow
import kotlinx.serialization.BinaryFormat
import kotlinx.serialization.KSerializer
import kotlinx.serialization.serializer

/**
 * An interface describing a [Site] in the distributed system.
 *
 * @param M the type of the underlying aggregated model for this [Site].
 */
interface Site<out M> : Exchange<Inc, Out> {
  val value: StateFlow<M>
}

/**
 * A mutable version of [Site], which allows the insertion of the events [T] through its [event]
 * method. Each [MutableSite] is associated with a globally unique [SiteIdentifier], which will be
 * used when yielding events.
 *
 * @param T the type of the events managed by this [Site].
 * @param M the type of the underlying aggregated model for this [Site].
 */
interface MutableSite<T, out M> : Site<M> {

  /** The globally unique [SiteIdentifier] for this [Site]. */
  val identifier: SiteIdentifier

  /**
   * Creates some new events, that are generated in the [EventScope]. This function returns once the
   * events have been successfully added to the underlying [MutableSite].
   */
  suspend fun event(block: suspend EventScope<T>.(M) -> Unit)
}

/**
 * Creates a new [Site] for the provided [SiteIdentifier], with a backing history.
 *
 * @param events some initial events to populate the history.
 *
 * @param T the type of the events managed by this [Site].
 */
inline fun <reified T> site(
    vararg events: Pair<EventIdentifier, T>,
): Site<Unit> =
    site(
        Unit,
        UnitProjection,
        *events,
    )

/**
 * Creates a new [Site] for the provided [SiteIdentifier], with a backing log. Additionally, this
 * overload takes a [OneWayProjection] and lets you specify a projection to apply to the data.
 *
 * @param initial the initial value for the projection aggregate.
 * @param projection the [OneWayProjection] for this [Site].
 * @param events some initial events to populate the history.
 *
 * @param M the type of the model for this [Site].
 * @param T the type of the events managed by this [Site].
 */
inline fun <M, reified T> site(
    initial: M,
    projection: OneWayProjection<M, T>,
    vararg events: Pair<EventIdentifier, T>,
): Site<M> =
    orderedSite(
        initial,
        OneWayMutableProjection(projection, serializer(), DefaultSerializationFormat),
        serializer(),
        DefaultSerializationFormat,
        *events,
    )

/**
 * Creates a new [Site] for the provided [SiteIdentifier], with a backing log. Additionally, this
 * overload takes a [TwoWayProjection] and lets you specify a projection to apply to the data.
 *
 * @param initial the initial value for the projection aggregate.
 * @param projection the [TwoWayProjection] for this [Site].
 * @param events some initial events to populate the history.
 *
 * @param M the type of the model for this [Site].
 * @param T the type of the events managed by this [Site].
 * @param C the type of the changes generated by this [Site].
 */
inline fun <M, reified T, reified C> site(
    initial: M,
    projection: TwoWayProjection<M, T, C>,
    vararg events: Pair<EventIdentifier, T>,
): Site<M> =
    orderedSite(
        initial,
        TwoWayMutableProjection(projection, serializer(), serializer(), DefaultSerializationFormat),
        serializer(),
        DefaultSerializationFormat,
        *events,
    )

/**
 * Creates a new [MutableSite] for the provided [SiteIdentifier], with a backing history. The
 * current model value of the site will always be [Unit], since it does not perform aggregations.
 *
 * @param identifier the globally unique identifier for this [Site].
 * @param events some initial events to populate the history.
 *
 * @param T the type of the events managed by this [Site].
 */
inline fun <reified T> mutableSite(
    identifier: SiteIdentifier,
    vararg events: Pair<EventIdentifier, T>,
): MutableSite<T, Unit> =
    mutableSite(
        identifier,
        Unit,
        UnitProjection,
        *events,
    )

/**
 * Creates a new [MutableSite] for the provided [SiteIdentifier], with a backing [log].
 * Additionally, this overload takes a [OneWayProjection] and lets you specify a projection to apply
 * to the data, to have custom [MutableSite.event] arguments.
 *
 * @param identifier the globally unique identifier for this [Site].
 * @param initial the initial value for the projection aggregate.
 * @param projection the [OneWayProjection] for this [Site].
 * @param events some initial events to populate the history.
 *
 * @param M the type of the model for this [Site].
 * @param T the type of the events managed by this [Site].
 */
inline fun <M, reified T> mutableSite(
    identifier: SiteIdentifier,
    initial: M,
    projection: OneWayProjection<M, T>,
    vararg events: Pair<EventIdentifier, T>,
): MutableSite<T, M> =
    orderedMutableSite(
        identifier,
        initial,
        OneWayMutableProjection(projection, serializer(), DefaultSerializationFormat),
        serializer(),
        DefaultSerializationFormat,
        *events,
    )

/**
 * Creates a new [MutableSite] for the provided [SiteIdentifier], with a backing [log].
 * Additionally, this overload takes a [TwoWayProjection] and lets you specify a projection to apply
 * to the data, to have custom [MutableSite.event] arguments.
 *
 * @param identifier the globally unique identifier for this [Site].
 * @param initial the initial value for the projection aggregate.
 * @param projection the [TwoWayProjection] for this [Site].
 * @param events some initial events to populate the history.
 *
 * @param M the type of the model for this [Site].
 * @param T the type of the events managed by this [Site].
 * @param C the type of the changes generated by this [Site].
 */
inline fun <M, reified T, reified C> mutableSite(
    identifier: SiteIdentifier,
    initial: M,
    projection: TwoWayProjection<M, T, C>,
    vararg events: Pair<EventIdentifier, T>,
): MutableSite<T, M> =
    orderedMutableSite(
        identifier,
        initial,
        TwoWayMutableProjection(projection, serializer(), serializer(), DefaultSerializationFormat),
        serializer(),
        DefaultSerializationFormat,
        *events,
    )

// SITE BUILDERS

@PublishedApi
internal object UnitProjection : OneWayProjection<Unit, Any?> {
  override fun forward(
      model: Unit,
      identifier: EventIdentifier,
      event: Any?,
  ) = model
}

@PublishedApi
internal fun <M, T> orderedSite(
    initial: M,
    projection: MutableProjection<M>,
    eventSerializer: KSerializer<T>,
    format: BinaryFormat,
    vararg events: Pair<EventIdentifier, T>,
): Site<M> =
    SiteImpl(
        mutableHistoryOf(initial, projection),
        eventSerializer,
        format,
        *events,
    )

@PublishedApi
internal fun <M, T> orderedMutableSite(
    identifier: SiteIdentifier,
    initial: M,
    projection: MutableProjection<M>,
    eventSerializer: KSerializer<T>,
    format: BinaryFormat,
    vararg events: Pair<EventIdentifier, T>,
): MutableSite<T, M> =
    MutableSiteImpl(
        identifier,
        eventSerializer,
        mutableHistoryOf(initial, projection),
        format,
        *events,
    )
